/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practica10;

import static java.lang.Thread.sleep;
import java.util.Random;
import org.jcsp.lang.Any2OneChannel;
import org.jcsp.lang.Channel;
import org.jcsp.lang.One2OneChannel;
import org.jcsp.util.Buffer;

/**
 *
 * @author wadad
 */
public class Generador extends javax.swing.JFrame {

    /**
     * Creates new form Generador
     */
    public Generador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     * @throws java.lang.InterruptedException
     */
    public static void main(String args[]) throws InterruptedException {
        Generador gen = new Generador();
        CanvasComedor cv = new CanvasComedor();
        gen.setLocation(250, 50);
        gen.setSize(1000, 700);
        gen.setTitle("Canvas Comedor de gatos y perros");
        gen.add(cv);
        gen.setVisible(true);
        Random ran = new Random(System.currentTimeMillis());
        One2OneChannel permisoPerro[] = Channel.one2oneArray(20, new Buffer(1));
        One2OneChannel permisoGato[] = Channel.one2oneArray(20, new Buffer(1));
        Any2OneChannel entraPerro = Channel.any2one(new Buffer(20));
        Any2OneChannel entraGato = Channel.any2one(new Buffer(20));
        Any2OneChannel salePerro = Channel.any2one(new Buffer(20));
        Any2OneChannel saleGato = Channel.any2one(new Buffer(20));

        for (int i = 0; i < 20; i++) {
            permisoGato[i] = Channel.one2one(new Buffer(1));
            permisoPerro[i] = Channel.one2one(new Buffer(1));
        }
        Thread hilos[] = new Thread[20];
        Controlador control = new Controlador(entraPerro, entraGato, salePerro, saleGato, permisoPerro, permisoGato);

        control.start();

        for (int i = 0; i < 20; i++) {
            if ((ran.nextInt(100) + 1) < 50) {
                hilos[i] = new Perro(entraPerro, salePerro, permisoPerro, cv, i);
            } else {
                hilos[i] = new Thread(new Gato(entraGato, saleGato, permisoGato, cv, i));
            }
             hilos[i].start();
            sleep(1000 * (ran.nextInt(2) + 1));
        }

        for (int i = 0; i < 20; i++) {
            hilos[i].join();
        }
        System.exit(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
