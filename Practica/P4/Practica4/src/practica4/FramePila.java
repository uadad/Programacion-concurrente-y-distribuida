/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Frame.java to edit this template
 */
package practica4;

import java.awt.Color;
import static java.lang.Thread.sleep;

/**
 *
 * @author wadad
 */
public class FramePila extends java.awt.Frame {

    /**
     * Creates new form FramePila
     */
    public FramePila() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException {
       
        FramePila pf = new FramePila();
        CanvasPila cp = new CanvasPila(10);
        Pila p = new Pila(10, cp);
        Productor p1 = new Productor(p);
        Productor p2 = new Productor(p);
        Productor p3 = new Productor(p);
        Productor p4 = new Productor(p);
        Thread c1 = new Thread(new Consumidor(p));

        pf.setLocation(300, 0);
        pf.add(cp);
        pf.pack();
        pf.setBackground(Color.red);
        pf.setVisible(true);

        System.out.println("Comienza el programa.");
        
        p1.start();
        p2.start();
        p3.start();
        p4.start();
        c1.start();
        
        c1.join(); //una vez que finalize el consumidor despertamos todos los hilos que estan en el wait
        System.out.println("Finaliza el Consumidor.");
        sleep(3000);
        for (int i = 0; i < 3; i++) {
            synchronized (p) {
            p.notifyAll();
        }
            sleep(3000);
        }
        
        
        p1.join();
        System.out.println("Finaliza el productor1.");
        
        p2.join();
        System.out.println("Finaliza el productor2.");
       
        p3.join();
        System.out.println("Finaliza el productor3.");
        
        p4.join();
        System.out.println("Finaliza el productor4.");
       
        System.out.println("Finaliza el programa.");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
