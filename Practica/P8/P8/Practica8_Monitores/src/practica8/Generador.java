/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practica8;

import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 *
 * @author wadad
 */
public class Generador extends javax.swing.JFrame {

    /**
     * Creates new form Generador
     */
    public Generador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException {
        Generador g = new Generador();
        System.out.println("Comienza el programa.");
        g.setSize(2000, 1000);
        CanvasCajero cv = new CanvasCajero();
        g.add(cv);
        g.setVisible(true);

        Cajero cajero = new Cajero();
        ExecutorService TareaTarjeta = Executors.newFixedThreadPool(10);
        ExecutorService TareasinTarjeta = Executors.newFixedThreadPool(10);

        ArrayList<Future<Integer>> resultadosT = new ArrayList();
        ArrayList<Future<Integer>> resultadosE = new ArrayList();
        for (int i = 0; i < 25; i++) {
            conTarjeta r = new conTarjeta(cajero, cv);
            Future<Integer> f = TareaTarjeta.submit(r);
            sinTarjeta e = new sinTarjeta(cajero, cv);
            Future<Integer> efe = TareasinTarjeta.submit(e);
            resultadosE.add(efe);
            resultadosT.add(f);
            sleep(500);
        }
        TareaTarjeta.shutdown();
        TareasinTarjeta.shutdown();
        int suma = 0;
        for (int i = 0; i < resultadosE.size(); i++) {
            try {
                Future f = resultadosE.get(i);
                suma += (int) f.get();
            } catch (InterruptedException | ExecutionException ex) {
                System.out.println("Interrumpido.");
            }
        }

        System.out.println("Resultados sin Tarjeta: " + suma/1000+" segundos");

        suma = 0;
        for (int i = 0; i < resultadosT.size(); i++) {
            try {
                Future f = resultadosT.get(i);
                suma += (int) f.get();
            } catch (InterruptedException | ExecutionException ex) {
                System.out.println("Interrumpido.");
            }
        }
        System.out.println("Resultados con Tarjeta: " + suma/1000+" segundos");

        System.out.println("Finaliza el programa.");
        System.exit(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
